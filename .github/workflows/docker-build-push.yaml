name: Docker Build, Push, and Release

on:
  push:
    branches:
      - main  # Trigger on changes to the main branch
    # paths:
    #   - 'Dockerfile'  # Trigger only if Dockerfile changes
    #   - './backup-postgres.sh'
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'  # Optional: Run daily to check for base image updates
  release:
    types: [published]  # Trigger when a new GitHub Release is published

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract version from tag
        id: version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64 # ,linux/arm64  # proxmox-backup-client has no arm binary
          push: ${{ github.event_name != 'pull_request' }}  # Push only on main branch or tag
          tags: |
            ghcr.io/${{ github.repository_owner }}/pbs-database-backup:latest
            ${{ startsWith(github.ref, 'refs/tags/') && format('ghcr.io/{0}/pbs-database-backup:{1}', github.repository_owner, env.VERSION) || '' }}
          labels: |
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.source=${{ github.repository_url }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG }}
          release_name: Release ${{ env.TAG }}
          draft: false
          prerelease: false
          generate_release_notes: true